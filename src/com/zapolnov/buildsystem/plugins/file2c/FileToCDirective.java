/*
 * Copyright (c) 2015 Nikolay Zapolnov (zapolnov@gmail.com).
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.zapolnov.buildsystem.plugins.file2c;

import com.zapolnov.buildsystem.build.ProjectBuilder;
import com.zapolnov.buildsystem.project.ProjectDirective;
import com.zapolnov.buildsystem.project.ProjectVisitor;
import com.zapolnov.buildsystem.project.directives.HeaderPathsDirective;
import com.zapolnov.buildsystem.project.directives.SourceFilesDirective;
import com.zapolnov.buildsystem.utility.FileBuilder;
import com.zapolnov.buildsystem.utility.FileUtils;
import com.zapolnov.buildsystem.utility.StringUtils;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

/** A 'file2c' directive in the project file. */
@SuppressWarnings("unused") public class FileToCDirective extends ProjectDirective
{
    /** Input file. */
    public final File input;
    /** Output file. */
    public final String output;
    /** Identifier. */
    public final String identifier;
    /** Namespace name (or `null`). */
    public final String namespace;
    /** Compression method. */
    public final CompressionMethod compressionMethod;

    /** Header search path. */
    private File headerSearchPath;
    /** Path to the generated header file. */
    private File headerFile;
    /** Path to the generated source file. */
    private File sourceFile;


    /**
     * Constructor.
     * @param input Input file.
     * @param output Output file.
     * @param identifier Identifier.
     * @param namespace Namespace (or `null`).
     * @param compressionMethod Compression method.
     */
    public FileToCDirective(File input, String output, String identifier,
        String namespace, CompressionMethod compressionMethod)
    {
        this.input = input;
        this.output = output;
        this.identifier = identifier;
        this.namespace = namespace;
        this.compressionMethod = compressionMethod;
    }

    @Override public void preBuild(ProjectBuilder projectBuilder) throws Throwable
    {
        File outputDirectory = projectBuilder.outputDirectory();
        headerSearchPath = FileUtils.getCanonicalFile(new File(outputDirectory, "file2c/include"));
        headerFile = FileUtils.getCanonicalFile(new File(headerSearchPath, output));
        sourceFile = FileUtils.getCanonicalFile(new File(outputDirectory, String.format("file2c/%s.cpp", output)));
    }

    @Override public void build(ProjectBuilder projectBuilder) throws Throwable
    {
        byte[] hash = StringUtils.md5ForObjects(input, output, identifier, namespace, compressionMethod.name);
        if (!headerFile.exists() || !sourceFile.exists() || projectBuilder.database.didInputFileChange(input, hash)) {
            byte[] data = FileUtils.byteArrayFromFile(input);

            switch (compressionMethod)
            {
            case NONE:
                break;
            }

            FileBuilder headerBuilder = new FileBuilder(headerFile.getParentFile(), headerFile.getName());
            FileBuilder sourceBuilder = new FileBuilder(sourceFile.getParentFile(), sourceFile.getName());

            writeAutogeneratedHeader(headerBuilder);
            writeAutogeneratedHeader(sourceBuilder);

            headerBuilder.append("#pragma once\n");
            headerBuilder.append('\n');
            headerBuilder.append("#include <cstdint>\n");
            headerBuilder.append("#include <cstddef>\n");
            headerBuilder.append('\n');

            sourceBuilder.append(String.format("#include \"%s\"\n",
                FileUtils.getRelativePath(sourceFile.getParentFile(), headerFile)));
            sourceBuilder.append('\n');

            writeNamespaceBegin(headerBuilder);
            writeNamespaceBegin(sourceBuilder);

            headerBuilder.append(String.format("enum : size_t { %s_size = %d };\n", identifier, data.length));
            headerBuilder.append(String.format("extern const uint8_t %s[%d];\n", identifier, data.length));

            sourceBuilder.append(String.format("const uint8_t %s[%d] = {", identifier, data.length));
            for (int i = 0; i < data.length; i++) {
                if (i % 32 == 0)
                    sourceBuilder.append("\n    ");
                sourceBuilder.append("0x");
                sourceBuilder.appendHex(data[i]);
                sourceBuilder.append(',');
            }
            sourceBuilder.append("\n};\n");

            writeNamespaceEnd(headerBuilder);
            writeNamespaceEnd(sourceBuilder);

            headerBuilder.commit(projectBuilder.database);
            sourceBuilder.commit(projectBuilder.database);
        }
    }

    private static void writeAutogeneratedHeader(FileBuilder builder)
    {
        builder.append("// ------------------------------------------------------\n");
        builder.append("// THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT!\n");
        builder.append("// ------------------------------------------------------\n");
        builder.append('\n');
    }

    private void writeNamespaceBegin(FileBuilder builder)
    {
        if (namespace != null) {
            builder.append(String.format("namespace %s {\n", namespace));
            builder.append('\n');
        }
    }

    private void writeNamespaceEnd(FileBuilder builder)
    {
        if (namespace != null) {
            builder.append('\n');
            builder.append(String.format("} // namespace %s\n", namespace));
        }
    }

    @Override public void visit(ProjectVisitor visitor)
    {
        List<File> sourceFiles = new ArrayList<>();
        sourceFiles.add(headerFile);
        sourceFiles.add(sourceFile);
        visitor.visitSourceFiles(new SourceFilesDirective(sourceFiles, false));

        List<File> headerPaths = new ArrayList<>();
        headerPaths.add(headerSearchPath);
        visitor.visitHeaderPaths(new HeaderPathsDirective(headerPaths, false));
    }
}
